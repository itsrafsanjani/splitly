---
alwaysApply: true
---
<laravel-boost-guidelines>
=== foundation rules ===

# Laravel Boost Guidelines

The Laravel Boost guidelines are specifically curated by Laravel maintainers for this application. These guidelines should be followed closely to enhance the user's satisfaction building Laravel applications.

## Foundational Context
This application is a Laravel application and its main Laravel ecosystems package & versions are below. You are an expert with them all. Ensure you abide by these specific packages & versions.

- php - 8.3.21
- inertiajs/inertia-laravel (INERTIA) - v2
- laravel/fortify (FORTIFY) - v1
- laravel/framework (LARAVEL) - v12
- laravel/prompts (PROMPTS) - v0
- laravel/wayfinder (WAYFINDER) - v0
- laravel/mcp (MCP) - v0
- laravel/pint (PINT) - v1
- laravel/sail (SAIL) - v1
- pestphp/pest (PEST) - v4
- phpunit/phpunit (PHPUNIT) - v12
- @inertiajs/react (INERTIA) - v2
- react (REACT) - v19
- tailwindcss (TAILWINDCSS) - v4
- @laravel/vite-plugin-wayfinder (WAYFINDER) - v0
- eslint (ESLINT) - v9
- prettier (PRETTIER) - v3


## Conventions
- You must follow all existing code conventions used in this application. When creating or editing a file, check sibling files for the correct structure, approach, naming.
- Use descriptive names for variables and methods. For example, `isRegisteredForDiscounts`, not `discount()`.
- Check for existing components to reuse before writing a new one.

## Verification Scripts
- Do not create verification scripts or tinker when tests cover that functionality and prove it works. Unit and feature tests are more important.

## Application Structure & Architecture
- Stick to existing directory structure - don't create new base folders without approval.
- Do not change the application's dependencies without approval.

## Frontend Bundling
- If the user doesn't see a frontend change reflected in the UI, it could mean they need to run `npm run build`, `npm run dev`, or `composer run dev`. Ask them.

## Replies
- Be concise in your explanations - focus on what's important rather than explaining obvious details.

## Documentation Files
- You must only create documentation files if explicitly requested by the user.


=== boost rules ===

## Laravel Boost
- Laravel Boost is an MCP server that comes with powerful tools designed specifically for this application. Use them.

## Artisan
- Use the `list-artisan-commands` tool when you need to call an Artisan command to double check the available parameters.

## URLs
- Whenever you share a project URL with the user you should use the `get-absolute-url` tool to ensure you're using the correct scheme, domain / IP, and port.

## Tinker / Debugging
- You should use the `tinker` tool when you need to execute PHP to debug code or query Eloquent models directly.
- Use the `database-query` tool when you only need to read from the database.

## Reading Browser Logs With the `browser-logs` Tool
- You can read browser logs, errors, and exceptions using the `browser-logs` tool from Boost.
- Only recent browser logs will be useful - ignore old logs.

## Searching Documentation (Critically Important)
- Boost comes with a powerful `search-docs` tool you should use before any other approaches. This tool automatically passes a list of installed packages and their versions to the remote Boost API, so it returns only version-specific documentation specific for the user's circumstance. You should pass an array of packages to filter on if you know you need docs for particular packages.
- The 'search-docs' tool is perfect for all Laravel related packages, including Laravel, Inertia, Livewire, Filament, Tailwind, Pest, Nova, Nightwatch, etc.
- You must use this tool to search for Laravel-ecosystem documentation before falling back to other approaches.
- Search the documentation before making code changes to ensure we are taking the correct approach.
- Use multiple, broad, simple, topic based queries to start. For example: `['rate limiting', 'routing rate limiting', 'routing']`.
- Do not add package names to queries - package information is already shared. For example, use `test resource table`, not `filament 4 test resource table`.

### Available Search Syntax
- You can and should pass multiple queries at once. The most relevant results will be returned first.

1. Simple Word Searches with auto-stemming - query=authentication - finds 'authenticate' and 'auth'
2. Multiple Words (AND Logic) - query=rate limit - finds knowledge containing both "rate" AND "limit"
3. Quoted Phrases (Exact Position) - query="infinite scroll" - Words must be adjacent and in that order
4. Mixed Queries - query=middleware "rate limit" - "middleware" AND exact phrase "rate limit"
5. Multiple Queries - queries=["authentication", "middleware"] - ANY of these terms


=== php rules ===

## PHP

- Always use curly braces for control structures, even if it has one line.

### Constructors
- Use PHP 8 constructor property promotion in `__construct()`.
    - <code-snippet>public function __construct(public GitHub $github) { }</code-snippet>
- Do not allow empty `__construct()` methods with zero parameters.

### Type Declarations
- Always use explicit return type declarations for methods and functions.
- Use appropriate PHP type hints for method parameters.

<code-snippet name="Explicit Return Types and Method Params" lang="php">
protected function isAccessible(User $user, ?string $path = null): bool
{
    ...
}
</code-snippet>

## Comments
- Prefer PHPDoc blocks over comments. Never use comments within the code itself unless there is something _very_ complex going on.

## PHPDoc Blocks
- Add useful array shape type definitions for arrays when appropriate.

## Enums
- Typically, keys in an Enum should be TitleCase. For example: `FavoritePerson`, `BestLake`, `Monthly`.


=== inertia-laravel/core rules ===

## Inertia Core

- Inertia.js components should be placed in the `resources/js/Pages` directory unless specified differently in the JS bundler (vite.config.js).
- Use `Inertia::render()` for server-side routing instead of traditional Blade views.
- Use `search-docs` for accurate guidance on all things Inertia.

<code-snippet lang="php" name="Inertia::render Example">
// routes/web.php example
Route::get('/users', function () {
    return Inertia::render('Users/Index', [
        'users' => User::all()
    ]);
});
</code-snippet>


=== inertia-laravel/v2 rules ===

## Inertia v2

- Make use of all Inertia features from v1 & v2. Check the documentation before making any changes to ensure we are taking the correct approach.

### Inertia v2 New Features
- Polling
- Prefetching
- Deferred props
- Infinite scrolling using merging props and `WhenVisible`
- Lazy loading data on scroll

### Deferred Props & Empty States
- When using deferred props on the frontend, you should add a nice empty state with pulsing / animated skeleton.

### Inertia Form General Guidance
- The recommended way to build forms when using Inertia is with the `<Form>` component - a useful example is below. Use `search-docs` with a query of `form component` for guidance.
- Forms can also be built using the `useForm` helper for more programmatic control, or to follow existing conventions. Use `search-docs` with a query of `useForm helper` for guidance.
- `resetOnError`, `resetOnSuccess`, and `setDefaultsOnSuccess` are available on the `<Form>` component. Use `search-docs` with a query of 'form component resetting' for guidance.


=== laravel/core rules ===

## Do Things the Laravel Way

- Use `php artisan make:` commands to create new files (i.e. migrations, controllers, models, etc.). You can list available Artisan commands using the `list-artisan-commands` tool.
- If you're creating a generic PHP class, use `artisan make:class`.
- Pass `--no-interaction` to all Artisan commands to ensure they work without user input. You should also pass the correct `--options` to ensure correct behavior.

### Database
- Always use proper Eloquent relationship methods with return type hints. Prefer relationship methods over raw queries or manual joins.
- Use Eloquent models and relationships before suggesting raw database queries
- Avoid `DB::`; prefer `Model::query()`. Generate code that leverages Laravel's ORM capabilities rather than bypassing them.
- Generate code that prevents N+1 query problems by using eager loading.
- Use Laravel's query builder for very complex database operations.

### Model Creation
- When creating new models, create useful factories and seeders for them too. Ask the user if they need any other things, using `list-artisan-commands` to check the available options to `php artisan make:model`.

### APIs & Eloquent Resources
- For APIs, default to using Eloquent API Resources and API versioning unless existing API routes do not, then you should follow existing application convention.

### Controllers & Validation
- Always create Form Request classes for validation rather than inline validation in controllers. Include both validation rules and custom error messages.
- Check sibling Form Requests to see if the application uses array or string based validation rules.

### Queues
- Use queued jobs for time-consuming operations with the `ShouldQueue` interface.

### Authentication & Authorization
- Use Laravel's built-in authentication and authorization features (gates, policies, Sanctum, etc.).

### URL Generation
- When generating links to other pages, prefer named routes and the `route()` function.

### Configuration
- Use environment variables only in configuration files - never use the `env()` function directly outside of config files. Always use `config('app.name')`, not `env('APP_NAME')`.

### Testing
- When creating models for tests, use the factories for the models. Check if the factory has custom states that can be used before manually setting up the model.
- Faker: Use methods such as `$this->faker->word()` or `fake()->randomDigit()`. Follow existing conventions whether to use `$this->faker` or `fake()`.
- When creating tests, make use of `php artisan make:test [options] <name>` to create a feature test, and pass `--unit` to create a unit test. Most tests should be feature tests.

### Vite Error
- If you receive an "Illuminate\Foundation\ViteException: Unable to locate file in Vite manifest" error, you can run `npm run build` or ask the user to run `npm run dev` or `composer run dev`.


=== laravel/v12 rules ===

## Laravel 12

- Use the `search-docs` tool to get version specific documentation.
- Since Laravel 11, Laravel has a new streamlined file structure which this project uses.

### Laravel 12 Structure
- No middleware files in `app/Http/Middleware/`.
- `bootstrap/app.php` is the file to register middleware, exceptions, and routing files.
- `bootstrap/providers.php` contains application specific service providers.
- **No app\Console\Kernel.php** - use `bootstrap/app.php` or `routes/console.php` for console configuration.
- **Commands auto-register** - files in `app/Console/Commands/` are automatically available and do not require manual registration.

### Database
- When modifying a column, the migration must include all of the attributes that were previously defined on the column. Otherwise, they will be dropped and lost.
- Laravel 11 allows limiting eagerly loaded records natively, without external packages: `$query->latest()->limit(10);`.

### Models
- Casts can and likely should be set in a `casts()` method on a model rather than the `$casts` property. Follow existing conventions from other models.


=== pint/core rules ===

## Laravel Pint Code Formatter

- You must run `vendor/bin/pint --dirty` before finalizing changes to ensure your code matches the project's expected style.
- Do not run `vendor/bin/pint --test`, simply run `vendor/bin/pint` to fix any formatting issues.


=== pest/core rules ===

## Pest

### Testing
- If you need to verify a feature is working, write or update a Unit / Feature test.

### Pest Tests
- All tests must be written using Pest. Use `php artisan make:test --pest <name>`.
- You must not remove any tests or test files from the tests directory without approval. These are not temporary or helper files - these are core to the application.
- Tests should test all of the happy paths, failure paths, and weird paths.
- Tests live in the `tests/Feature` and `tests/Unit` directories.
- Pest tests look and behave like this:
<code-snippet name="Basic Pest Test Example" lang="php">
it('is true', function () {
    expect(true)->toBeTrue();
});
</code-snippet>

### Running Tests
- Run the minimal number of tests using an appropriate filter before finalizing code edits.
- To run all tests: `php artisan test`.
- To run all tests in a file: `php artisan test tests/Feature/ExampleTest.php`.
- To filter on a particular test name: `php artisan test --filter=testName` (recommended after making a change to a related file).
- When the tests relating to your changes are passing, ask the user if they would like to run the entire test suite to ensure everything is still passing.

### Pest Assertions
- When asserting status codes on a response, use the specific method like `assertForbidden` and `assertNotFound` instead of using `assertStatus(403)` or similar, e.g.:
<code-snippet name="Pest Example Asserting postJson Response" lang="php">
it('returns all', function () {
    $response = $this->postJson('/api/docs', []);

    $response->assertSuccessful();
});
</code-snippet>

### Mocking
- Mocking can be very helpful when appropriate.
- When mocking, you can use the `Pest\Laravel\mock` Pest function, but always import it via `use function Pest\Laravel\mock;` before using it. Alternatively, you can use `$this->mock()` if existing tests do.
- You can also create partial mocks using the same import or self method.

### Datasets
- Use datasets in Pest to simplify tests which have a lot of duplicated data. This is often the case when testing validation rules, so consider going with this solution when writing tests for validation rules.

<code-snippet name="Pest Dataset Example" lang="php">
it('has emails', function (string $email) {
    expect($email)->not->toBeEmpty();
})->with([
    'james' => 'james@laravel.com',
    'taylor' => 'taylor@laravel.com',
]);
</code-snippet>


=== pest/v4 rules ===

## Pest 4

- Pest v4 is a huge upgrade to Pest and offers: browser testing, smoke testing, visual regression testing, test sharding, and faster type coverage.
- Browser testing is incredibly powerful and useful for this project.
- Browser tests should live in `tests/Browser/`.
- Use the `search-docs` tool for detailed guidance on utilizing these features.

### Browser Testing
- You can use Laravel features like `Event::fake()`, `assertAuthenticated()`, and model factories within Pest v4 browser tests, as well as `RefreshDatabase` (when needed) to ensure a clean state for each test.
- Interact with the page (click, type, scroll, select, submit, drag-and-drop, touch gestures, etc.) when appropriate to complete the test.
- If requested, test on multiple browsers (Chrome, Firefox, Safari).
- If requested, test on different devices and viewports (like iPhone 14 Pro, tablets, or custom breakpoints).
- Switch color schemes (light/dark mode) when appropriate.
- Take screenshots or pause tests for debugging when appropriate.

### Example Tests

<code-snippet name="Pest Browser Test Example" lang="php">
it('may reset the password', function () {
    Notification::fake();

    $this->actingAs(User::factory()->create());

    $page = visit('/sign-in'); // Visit on a real browser...

    $page->assertSee('Sign In')
        ->assertNoJavascriptErrors() // or ->assertNoConsoleLogs()
        ->click('Forgot Password?')
        ->fill('email', 'nuno@laravel.com')
        ->click('Send Reset Link')
        ->assertSee('We have emailed your password reset link!')

    Notification::assertSent(ResetPassword::class);
});
</code-snippet>

<code-snippet name="Pest Smoke Testing Example" lang="php">
$pages = visit(['/', '/about', '/contact']);

$pages->assertNoJavascriptErrors()->assertNoConsoleLogs();
</code-snippet>


=== inertia-react/core rules ===

## Inertia + React

- Use `router.visit()` or `<Link>` for navigation instead of traditional links.

<code-snippet name="Inertia Client Navigation" lang="react">

import { Link } from '@inertiajs/react'
<Link href="/">Home</Link>

</code-snippet>


=== inertia-react/v2/forms rules ===

## Inertia + React Forms

<code-snippet name="`<Form>` Component Example" lang="react">

import { Form } from '@inertiajs/react'

export default () => (
    <Form action="/users" method="post">
        {({
            errors,
            hasErrors,
            processing,
            wasSuccessful,
            recentlySuccessful,
            clearErrors,
            resetAndClearErrors,
            defaults
        }) => (
        <>
        <input type="text" name="name" />

        {errors.name && <div>{errors.name}</div>}

        <button type="submit" disabled={processing}>
            {processing ? 'Creating...' : 'Create User'}
        </button>

        {wasSuccessful && <div>User created successfully!</div>}
        </>
    )}
    </Form>
)

</code-snippet>


=== tailwindcss/core rules ===

## Tailwind Core

- Use Tailwind CSS classes to style HTML, check and use existing tailwind conventions within the project before writing your own.
- Offer to extract repeated patterns into components that match the project's conventions (i.e. Blade, JSX, Vue, etc..)
- Think through class placement, order, priority, and defaults - remove redundant classes, add classes to parent or child carefully to limit repetition, group elements logically
- You can use the `search-docs` tool to get exact examples from the official documentation when needed.

### Spacing
- When listing items, use gap utilities for spacing, don't use margins.

    <code-snippet name="Valid Flex Gap Spacing Example" lang="html">
        <div class="flex gap-8">
            <div>Superior</div>
            <div>Michigan</div>
            <div>Erie</div>
        </div>
    </code-snippet>


### Dark Mode
- If existing pages and components support dark mode, new pages and components must support dark mode in a similar way, typically using `dark:`.


=== tailwindcss/v4 rules ===

## Tailwind 4

- Always use Tailwind CSS v4 - do not use the deprecated utilities.
- `corePlugins` is not supported in Tailwind v4.
- In Tailwind v4, you import Tailwind using a regular CSS `@import` statement, not using the `@tailwind` directives used in v3:

<code-snippet name="Tailwind v4 Import Tailwind Diff" lang="diff">
   - @tailwind base;
   - @tailwind components;
   - @tailwind utilities;
   + @import "tailwindcss";
</code-snippet>


### Replaced Utilities
- Tailwind v4 removed deprecated utilities. Do not use the deprecated option - use the replacement.
- Opacity values are still numeric.

| Deprecated |	Replacement |
|------------+--------------|
| bg-opacity-* | bg-black/* |
| text-opacity-* | text-black/* |
| border-opacity-* | border-black/* |
| divide-opacity-* | divide-black/* |
| ring-opacity-* | ring-black/* |
| placeholder-opacity-* | placeholder-black/* |
| flex-shrink-* | shrink-* |
| flex-grow-* | grow-* |
| overflow-ellipsis | text-ellipsis |
| decoration-slice | box-decoration-slice |
| decoration-clone | box-decoration-clone |


=== tests rules ===

## Test Enforcement

- Every change must be programmatically tested. Write a new test or update an existing test, then run the affected tests to make sure they pass.
- Run the minimum number of tests needed to ensure code quality and speed. Use `php artisan test` with a specific filename or filter.


=== .ai/laravel-best-practices rules ===

### **Single responsibility principle**

A class should have only one responsibility.

Bad:


    <code-snippet name="Bad update method with multiple responsibilities" lang="php">
        public function update(Request $request): string
        {
            $validated = $request->validate([
                'title' => 'required|max:255',
                'events' => 'required|array:date,type'
            ]);

            foreach ($request->events as $event) {
                $date = $this->carbon->parse($event['date'])->toString();

                $this->logger->log('Update event ' . $date . ' :: ' . $);
            }

            $this->event->updateGeneralEvent($request->validated());

            return back();
        }
    </code-snippet>


Good:


    <code-snippet name="Good update method with single responsibility" lang="php">
        public function update(UpdateRequest $request): string
        {
            $this->logService->logEvents($request->events);

            $this->event->updateGeneralEvent($request->validated());

            return back();
        }
    </code-snippet>


### **Methods should do just one thing**

A function should do just one thing and do it well.

Bad:


    <code-snippet name="Bad method doing multiple things" lang="php">
        public function getFullNameAttribute(): string
        {
            if (auth()->user() && auth()->user()->hasRole('client') && auth()->user()->isVerified()) {
                return 'Mr. ' . $this->first_name . ' ' . $this->middle_name . ' ' . $this->last_name;
            } else {
                return $this->first_name[0] . '. ' . $this->last_name;
            }
        }
    </code-snippet>


Good:


    <code-snippet name="Good methods with single responsibility" lang="php">
        public function getFullNameAttribute(): string
        {
            return $this->isVerifiedClient() ? $this->getFullNameLong() : $this->getFullNameShort();
        }

        public function isVerifiedClient(): bool
        {
            return auth()->user() && auth()->user()->hasRole('client') && auth()->user()->isVerified();
        }

        public function getFullNameLong(): string
        {
            return 'Mr. ' . $this->first_name . ' ' . $this->middle_name . ' ' . $this->last_name;
        }

        public function getFullNameShort(): string
        {
            return $this->first_name[0] . '. ' . $this->last_name;
        }
    </code-snippet>


### **Fat models, skinny controllers**

Put all DB related logic into Eloquent models.

Bad:


    <code-snippet name="Bad controller with database logic" lang="php">
        public function index()
        {
            $clients = Client::verified()
                ->with(['orders' => function ($q) {
                    $q->where('created_at', '>', Carbon::today()->subWeek());
                }])
                ->get();

            return view('index', ['clients' => $clients]);
        }
    </code-snippet>


Good:


    <code-snippet name="Good skinny controller" lang="php">
        public function index()
        {
            return view('index', ['clients' => $this->client->getWithNewOrders()]);
        }
    </code-snippet>

    <code-snippet name="Good fat model with database logic" lang="php">
        class Client extends Model
        {
            public function getWithNewOrders(): Collection
            {
                return $this->verified()
                    ->with(['orders' => function ($q) {
                        $q->where('created_at', '>', Carbon::today()->subWeek());
                    }])
                    ->get();
            }
        }
    </code-snippet>


### **Validation**

Move validation from controllers to Request classes.

Bad:


    <code-snippet name="Bad validation in controller" lang="php">
        public function store(Request $request)
        {
            $request->validate([
                'title' => 'required|unique:posts|max:255',
                'body' => 'required',
                'publish_at' => 'nullable|date',
            ]);

            ...
        }
    </code-snippet>


Good:


    <code-snippet name="Good controller with form request" lang="php">
        public function store(PostRequest $request)
        {
            ...
        }
    </code-snippet>

    <code-snippet name="Good form request validation" lang="php">
        class PostRequest extends Request
        {
            public function rules(): array
            {
                return [
                    'title' => 'required|unique:posts|max:255',
                    'body' => 'required',
                    'publish_at' => 'nullable|date',
                ];
            }
        }
    </code-snippet>


### **Business logic should be in service class**

A controller must have only one responsibility, so move business logic from controllers to service classes.

Bad:


    <code-snippet name="Bad business logic in controller" lang="php">
        public function store(Request $request)
        {
            if ($request->hasFile('image')) {
                $request->file('image')->move(public_path('images') . 'temp');
            }

            ...
        }
    </code-snippet>


Good:


    <code-snippet name="Good controller using service class" lang="php">
        public function store(Request $request)
        {
            $this->articleService->handleUploadedImage($request->file('image'));

            ...
        }
    </code-snippet>

    <code-snippet name="Good service class for business logic" lang="php">
        class ArticleService
        {
            public function handleUploadedImage($image): void
            {
                if (!is_null($image)) {
                    $image->move(public_path('images') . 'temp');
                }
            }
        }
    </code-snippet>


### **Don't repeat yourself (DRY)**

Reuse code when you can. SRP is helping you to avoid duplication. Also, reuse Blade templates, use Eloquent scopes etc.

Bad:


    <code-snippet name="Bad duplicated code" lang="php">
        public function getActive()
        {
            return $this->where('verified', 1)->whereNotNull('deleted_at')->get();
        }

        public function getArticles()
        {
            return $this->whereHas('user', function ($q) {
                $q->where('verified', 1)->whereNotNull('deleted_at');
            })->get();
        }
    </code-snippet>


Good:


    <code-snippet name="Good reusable scope and methods" lang="php">
        public function scopeActive($q)
        {
            return $q->where('verified', true)->whereNotNull('deleted_at');
        }

        public function getActive(): Collection
        {
            return $this->active()->get();
        }

        public function getArticles(): Collection
        {
            return $this->whereHas('user', function ($q) {
                $q->active();
            })->get();
        }
    </code-snippet>


### **Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays**

Eloquent allows you to write readable and maintainable code. Also, Eloquent has great built-in tools like soft deletes,
events, scopes etc. You may want to check out [Eloquent to SQL
reference](https://github.com/alexeymezenin/eloquent-sql-reference)

Bad:


    <code-snippet name="Bad raw SQL query" lang="sql">
        SELECT *
        FROM `articles`
        WHERE EXISTS (SELECT *
        FROM `users`
        WHERE `articles`.`user_id` = `users`.`id`
        AND EXISTS (SELECT *
        FROM `profiles`
        WHERE `profiles`.`user_id` = `users`.`id`)
        AND `users`.`deleted_at` IS NULL)
        AND `verified` = '1'
        AND `active` = '1'
        ORDER BY `created_at` DESC
    </code-snippet>


Good:


    <code-snippet name="Good Eloquent query" lang="php">
        Article::has('user.profile')->verified()->latest()->get();
    </code-snippet>


### **Mass assignment**

Bad:


    <code-snippet name="Bad manual mass assignment" lang="php">
        $article = new Article;
        $article->title = $request->title;
        $article->content = $request->content;
        $article->verified = $request->verified;

        // Add category to article
        $article->category_id = $category->id;
        $article->save();
    </code-snippet>


Good:


    <code-snippet name="Good proper mass assignment" lang="php">
        $category->article()->create($request->validated());
    </code-snippet>


### **Do not execute queries in Blade templates and use eager loading (N + 1 problem)**

Bad (for 100 users, 101 DB queries will be executed):


    <code-snippet name="Bad N+1 query problem in Blade" lang="blade">
        @foreach (User::all() as $user)
            {{ $user->profile->name }}
        @endforeach
    </code-snippet>


Good (for 100 users, 2 DB queries will be executed):


    <code-snippet name="Good eager loading to solve N+1" lang="php">
        $users = User::with('profile')->get();

        @foreach ($users as $user)
            {{ $user->profile->name }}
        @endforeach
    </code-snippet>


### **Chunk data for data-heavy tasks**

Bad:


    <code-snippet name="Bad loading all data at once" lang="php">
        $users = $this->get();

        foreach ($users as $user) {
            ...
        }
    </code-snippet>


Good:


    <code-snippet name="Good chunking data for memory efficiency" lang="php">
        $this->chunk(500, function ($users) {
            foreach ($users as $user) {
                ...
            }
        });
    </code-snippet>


### **Prefer descriptive method and variable names over comments**

Bad:


    <code-snippet name="Bad comment instead of descriptive method" lang="php">
        // Determine if there are any joins
        if (count((array) $builder->getQuery()->joins) > 0)
    </code-snippet>


Good:


    <code-snippet name="Good descriptive method name" lang="php">
        if ($this->hasJoins())
    </code-snippet>


### **Do not put JS and CSS in Blade templates and do not put any HTML in PHP classes**

Bad:


    <code-snippet name="Bad direct PHP in JavaScript" lang="javascript">
        let article = `{{ json_encode($article) }}`;
    </code-snippet>


Better:


    <code-snippet name="Better passing data to JavaScript" lang="php">
        <input id="article" type="hidden" value='@json($article)'>

        Or

        <button class="js-fav-article" data-article='@json($article)'>{{ $article->name }}
            <button>
    </code-snippet>


In a Javascript file:


    <code-snippet name="JavaScript accessing data" lang="javascript">
        let article = $('#article').val();
    </code-snippet>


The best way is to use specialized PHP to JS package to transfer the data.

### **Use config and language files, constants instead of text in the code**

Bad:


    <code-snippet name="Bad hardcoded text and magic strings" lang="php">
        public function isNormal(): bool
        {
            return $article->type === 'normal';
        }

        return back()->with('message', 'Your article has been added!');
    </code-snippet>


Good:


    <code-snippet name="Good constants and language files" lang="php">
        public function isNormal()
        {
            return $article->type === Article::TYPE_NORMAL;
        }

        return back()->with('message', __('app.article_added'));
    </code-snippet>


### **Use standard Laravel tools accepted by community**

Prefer to use built-in Laravel functionality and community packages instead of using 3rd party packages and
tools. Any developer who will work with your app in the future will need to learn new tools. Also, chances to
get help from the Laravel community are significantly lower when you're using a 3rd party package or tool. Do
not make your client pay for that.

Task | Standard tools | 3rd party tools
------------ | ------------- | -------------
Authorization | Policies | Entrust, Sentinel and other packages
Compiling assets | Laravel Mix, Vite | Grunt, Gulp, 3rd party packages
Development Environment | Laravel Sail, Homestead | Docker
Deployment | Laravel Forge | Deployer and other solutions
Unit testing | PHPUnit, Mockery | Phpspec, Pest
Browser testing | Laravel Dusk | Codeception
DB | Eloquent | SQL, Doctrine
Templates | Blade | Twig
Working with data | Laravel collections | Arrays
Form validation | Request classes | 3rd party packages, validation in controller
Authentication | Built-in | 3rd party packages, your own solution
API authentication | Laravel Passport, Laravel Sanctum | 3rd party JWT and OAuth packages
Creating API | Built-in | Dingo API and similar packages
Working with DB structure | Migrations | Working with DB structure directly
Localization | Built-in | 3rd party packages
Realtime user interfaces | Laravel Echo, Pusher | 3rd party packages and working with WebSockets directly
Generating testing data | Seeder classes, Model Factories, Faker | Creating testing data manually
Task scheduling | Laravel Task Scheduler | Scripts and 3rd party packages
DB | MySQL, PostgreSQL, SQLite, SQL Server | MongoDB

### **Follow Laravel naming conventions**

Follow [PSR standards](https://www.php-fig.org/psr/psr-12/).

Also, follow naming conventions accepted by Laravel community:

What | How | Good | Bad
------------ | ------------- | ------------- | -------------
Controller | singular | ArticleController | ~~ArticlesController~~
Route | plural | articles/1 | ~~article/1~~
Route name | snake_case with dot notation | users.show_active | ~~users.show-active, show-active-users~~
Model | singular | User | ~~Users~~
hasOne or belongsTo relationship | singular | articleComment | ~~articleComments, article_comment~~
All other relationships | plural | articleComments | ~~articleComment, article_comments~~
Table | plural | article_comments | ~~article_comment, articleComments~~
Pivot table | singular model names in alphabetical order | article_user | ~~user_article, articles_users~~
Table column | snake_case without model name | meta_title | ~~MetaTitle; article_meta_title~~
Model property | snake_case | $model->created_at | ~~$model->createdAt~~
Foreign key | singular model name with _id suffix | article_id | ~~ArticleId, id_article, articles_id~~
Primary key | - | id | ~~custom_id~~
Migration | - | 2017_01_01_000000_create_articles_table | ~~2017_01_01_000000_articles~~
Method | camelCase | getAll | ~~get_all~~
Method in resource controller | [table](https://laravel.com/docs/master/controllers#resource-controllers) |
store | ~~saveArticle~~
Method in test class | camelCase | testGuestCannotSeeArticle | ~~test_guest_cannot_see_article~~
Variable | camelCase | $articlesWithAuthor | ~~$articles_with_author~~
Collection | descriptive, plural | $activeUsers = User::active()->get() | ~~$active, $data~~
Object | descriptive, singular | $activeUser = User::active()->first() | ~~$users, $obj~~
Config and language files index | snake_case | articles_enabled | ~~ArticlesEnabled; articles-enabled~~
View | kebab-case | show-filtered.blade.php | ~~showFiltered.blade.php, show_filtered.blade.php~~
Config | snake_case | google_calendar.php | ~~googleCalendar.php, google-calendar.php~~
Contract (interface) | adjective or noun | AuthenticationInterface | ~~Authenticatable, IAuthentication~~
Trait | adjective | Notifiable | ~~NotificationTrait~~
Trait [(PSR)](https://www.php-fig.org/bylaws/psr-naming-conventions/) | adjective | NotifiableTrait |
~~Notification~~
Enum | singular | UserType | ~~UserTypes~~, ~~UserTypeEnum~~
FormRequest | singular | UpdateUserRequest | ~~UpdateUserFormRequest~~, ~~UserFormRequest~~, ~~UserRequest~~
Seeder | singular | UserSeeder | ~~UsersSeeder~~

### **Convention over configuration**

As long as you follow certain conventions, you do not need to add additional configuration.

Bad:


    <code-snippet name="Bad overriding conventions" lang="php">
        // Table name 'Customer'
        // Primary key 'customer_id'
        class Customer extends Model
        {
        const CREATED_AT = 'created_at';
        const UPDATED_AT = 'updated_at';

        protected $table = 'Customer';
        protected $primaryKey = 'customer_id';

        public function roles(): BelongsToMany
        {
        return $this->belongsToMany(Role::class, 'role_customer', 'customer_id', 'role_id');
        }
        }
    </code-snippet>


Good:


    <code-snippet name="Good following conventions" lang="php">
        // Table name 'customers'
        // Primary key 'id'
        class Customer extends Model
        {
        public function roles(): BelongsToMany
        {
        return $this->belongsToMany(Role::class);
        }
        }
    </code-snippet>


### **Use shorter and more readable syntax where possible**

Bad:


    <code-snippet name="Bad verbose syntax" lang="php">
        $request->session()->get('cart');
        $request->input('name');
    </code-snippet>


Good:


    <code-snippet name="Good concise syntax" lang="php">
        session('cart');
        $request->name;
    </code-snippet>


More examples:

Common syntax | Shorter and more readable syntax
------------ | -------------
`Session::get('cart')` | `session('cart')`
`$request->session()->get('cart')` | `session('cart')`
`Session::put('cart', $data)` | `session(['cart' => $data])`
`$request->input('name'), Request::get('name')` | `$request->name, request('name')`
`return Redirect::back()` | `return back()`
`is_null($object->relation) ? null : $object->relation->id` | `optional($object->relation)->id` (in PHP 8:
`$object->relation?->id`)
`return view('index')->with('title', $title)->with('client', $client)` | `return view('index', compact('title',
'client'))`
`$request->has('value') ? $request->value : 'default';` | `$request->get('value', 'default')`
`Carbon::now(), Carbon::today()` | `now(), today()`
`App::make('Class')` | `app('Class')`
`->where('column', '=', 1)` | `->where('column', 1)`
`->orderBy('created_at', 'desc')` | `->latest()`
`->orderBy('age', 'desc')` | `->latest('age')`
`->orderBy('created_at', 'asc')` | `->oldest()`
`->select('id', 'name')->get()` | `->get(['id', 'name'])`
`->first()->name` | `->value('name')`

### **Use IoC / Service container instead of new Class**

new Class syntax creates tight coupling between classes and complicates testing. Use IoC container or facades
instead.

Bad:


    <code-snippet name="Bad direct class instantiation" lang="php">
        $user = new User;
        $user->create($request->validated());
    </code-snippet>


Good:


    <code-snippet name="Good dependency injection" lang="php">
        public function __construct(protected User $user) {}

        ...

        $this->user->create($request->validated());
    </code-snippet>


### **Do not get data from the `.env` file directly**

Pass the data to config files instead and then use the `config()` helper function to use the data in an
application.

Bad:


    <code-snippet name="Bad direct env() usage" lang="php">
        $apiKey = env('API_KEY');
    </code-snippet>


Good:


    <code-snippet name="Good config usage" lang="php">
        // config/api.php
        'key' => env('API_KEY'),

        // Use the data
        $apiKey = config('api.key');
    </code-snippet>


### **Store dates in the standard format. Use accessors and mutators to modify date format**

A date as a string is less reliable than an object instance, e.g. a Carbon-instance. It's recommended to pass
Carbon objects between classes instead of date strings. Rendering should be done in the display layer
(templates):

Bad:


    <code-snippet name="Bad date formatting in Blade" lang="php">
        {{ Carbon::createFromFormat('Y-d-m H-i', $object->ordered_at)->toDateString() }}
        {{ Carbon::createFromFormat('Y-d-m H-i', $object->ordered_at)->format('m-d') }}
    </code-snippet>


Good:


    <code-snippet name="Good date casting and formatting" lang="php">
        // Model
        protected $casts = [
            'ordered_at' => 'datetime',
        ];

        // Blade view
        {{ $object->ordered_at->toDateString() }}
        {{ $object->ordered_at->format('m-d') }}
    </code-snippet>


### **Do not use DocBlocks**

DocBlocks reduce readability. Use a descriptive method name and modern PHP features like return type hints
instead.

Bad:


    <code-snippet name="Bad excessive DocBlocks" lang="php">
        /**
        * The function checks if given string is a valid ASCII string
        *
        * @param string $string String we get from frontend which might contain
        * illegal characters. Returns True is the string
        * is valid.
        *
        * @return bool
        * @author John Smith
        *
        * @license GPL
        */

        public function checkString($string)
        {
        }
    </code-snippet>


Good:


    <code-snippet name="Good descriptive method without DocBlocks" lang="php">
        public function isValidAsciiString(string $string): bool
        {
        }
    </code-snippet>


### **Other good practices**

Avoid using patterns and tools that are alien to Laravel and similar frameworks (i.e. RoR, Django). If you like
Symfony (or Spring) approach for building apps, it's a good idea to use these frameworks instead.

Never put any logic in routes files.

Minimize usage of vanilla PHP in Blade templates.

Use in-memory DB for testing.

Do not override standard framework features to avoid problems related to updating the framework version and many
other issues.

Use modern PHP syntax where possible, but don't forget about readability.

Avoid using View Composers and similar tools unless you really know what you're doing. In most cases, there is a
better way to solve the problem.


=== laravel/fortify rules ===

## Laravel Fortify

Fortify is a headless authentication backend that provides authentication routes and controllers for Laravel applications.

**Before implementing any authentication features, use the `search-docs` tool to get the latest docs for that specific feature.**

### Configuration & Setup
- Check `config/fortify.php` to see what's enabled. Use `search-docs` for detailed information on specific features.
- Enable features by adding them to the `'features' => []` array: `Features::registration()`, `Features::resetPasswords()`, etc.
- To see the all Fortify registered routes, use the `list-routes` tool with the `only_vendor: true` and `action: "Fortify"` parameters.
- Fortify includes view routes by default (login, register). Set `'views' => false` in the configuration file to disable them if you're handling views yourself.

### Customization
- Views can be customized in `FortifyServiceProvider`'s `boot()` method using `Fortify::loginView()`, `Fortify::registerView()`, etc.
- Customize authentication logic with `Fortify::authenticateUsing()` for custom user retrieval / validation.
- Actions in `app/Actions/Fortify/` handle business logic (user creation, password reset, etc.). They're fully customizable, so you can modify them to change feature behavior.

## Available Features
- `Features::registration()` for user registration.
- `Features::emailVerification()` to verify new user emails.
- `Features::twoFactorAuthentication()` for 2FA with QR codes and recovery codes.
  - Add options: `['confirmPassword' => true, 'confirm' => true]` to require password confirmation and OTP confirmation before enabling 2FA.
- `Features::updateProfileInformation()` to let users update their profile.
- `Features::updatePasswords()` to let users change their passwords.
- `Features::resetPasswords()` for password reset via email.
</laravel-boost-guidelines>
